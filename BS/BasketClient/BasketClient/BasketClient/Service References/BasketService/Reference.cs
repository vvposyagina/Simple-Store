//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.BasketService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BasketService.IBasket", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IBasket {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/Start", ReplyAction="http://tempuri.org/IBasket/StartResponse")]
        void Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/Start", ReplyAction="http://tempuri.org/IBasket/StartResponse")]
        System.Threading.Tasks.Task StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/Search", ReplyAction="http://tempuri.org/IBasket/SearchResponse")]
        System.Xml.Linq.XElement Search(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/Search", ReplyAction="http://tempuri.org/IBasket/SearchResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SearchAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/AddItem", ReplyAction="http://tempuri.org/IBasket/AddItemResponse")]
        bool AddItem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/AddItem", ReplyAction="http://tempuri.org/IBasket/AddItemResponse")]
        System.Threading.Tasks.Task<bool> AddItemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/DeleteItem", ReplyAction="http://tempuri.org/IBasket/DeleteItemResponse")]
        bool DeleteItem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/DeleteItem", ReplyAction="http://tempuri.org/IBasket/DeleteItemResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/GetCurrentBasket", ReplyAction="http://tempuri.org/IBasket/GetCurrentBasketResponse")]
        System.Xml.Linq.XElement GetCurrentBasket();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/GetCurrentBasket", ReplyAction="http://tempuri.org/IBasket/GetCurrentBasketResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCurrentBasketAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/GetTotal", ReplyAction="http://tempuri.org/IBasket/GetTotalResponse")]
        int GetTotal();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBasket/GetTotal", ReplyAction="http://tempuri.org/IBasket/GetTotalResponse")]
        System.Threading.Tasks.Task<int> GetTotalAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/IBasket/PayPurchase", ReplyAction="http://tempuri.org/IBasket/PayPurchaseResponse")]
        bool PayPurchase();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/IBasket/PayPurchase", ReplyAction="http://tempuri.org/IBasket/PayPurchaseResponse")]
        System.Threading.Tasks.Task<bool> PayPurchaseAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBasketChannel : Client.BasketService.IBasket, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BasketClient : System.ServiceModel.ClientBase<Client.BasketService.IBasket>, Client.BasketService.IBasket {
        
        public BasketClient() {
        }
        
        public BasketClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BasketClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BasketClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BasketClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Start() {
            base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task StartAsync() {
            return base.Channel.StartAsync();
        }
        
        public System.Xml.Linq.XElement Search(string query) {
            return base.Channel.Search(query);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SearchAsync(string query) {
            return base.Channel.SearchAsync(query);
        }
        
        public bool AddItem(int id) {
            return base.Channel.AddItem(id);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemAsync(int id) {
            return base.Channel.AddItemAsync(id);
        }
        
        public bool DeleteItem(int id) {
            return base.Channel.DeleteItem(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemAsync(int id) {
            return base.Channel.DeleteItemAsync(id);
        }
        
        public System.Xml.Linq.XElement GetCurrentBasket() {
            return base.Channel.GetCurrentBasket();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCurrentBasketAsync() {
            return base.Channel.GetCurrentBasketAsync();
        }
        
        public int GetTotal() {
            return base.Channel.GetTotal();
        }
        
        public System.Threading.Tasks.Task<int> GetTotalAsync() {
            return base.Channel.GetTotalAsync();
        }
        
        public bool PayPurchase() {
            return base.Channel.PayPurchase();
        }
        
        public System.Threading.Tasks.Task<bool> PayPurchaseAsync() {
            return base.Channel.PayPurchaseAsync();
        }
    }
}
